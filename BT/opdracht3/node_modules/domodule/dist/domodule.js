import attrObj from 'attrobj';
import aug from 'aug';
import { find, findOne, on } from 'domassist';

function _defineProperties(target, props) {
  for (var i = 0; i < props.length; i++) {
    var descriptor = props[i];
    descriptor.enumerable = descriptor.enumerable || false;
    descriptor.configurable = true;
    if ("value" in descriptor) descriptor.writable = true;
    Object.defineProperty(target, descriptor.key, descriptor);
  }
}

function _createClass(Constructor, protoProps, staticProps) {
  if (protoProps) _defineProperties(Constructor.prototype, protoProps);
  if (staticProps) _defineProperties(Constructor, staticProps);
  return Constructor;
}

function findParent(elem) {
  if (elem.parentNode) {
    // Accounting for https://bugs.webkit.org/show_bug.cgi?id=161454
    var dataset = JSON.parse(JSON.stringify(elem.parentNode.dataset));

    if (dataset.module) {
      return elem.parentNode;
    }

    return findParent(elem.parentNode);
  }

  return elem;
}

var ACTION_SELECTOR = '[data-action]';
var DOMAssist = {
  find: find,
  findOne: findOne,
  on: on
};

var Domodule =
/*#__PURE__*/
function () {
  function Domodule(el) {
    this.log('begin setup');
    this.el = el;
    this.els = {};
    this.options = aug({}, this.defaults, attrObj('module', this.el));
    this.moduleName = this.el.dataset.module;
    this.setUps = {
      actions: [],
      named: [],
      options: []
    };
    this.boundActionRouter = this.actionRouter.bind(this);
    this.preInit();
    this.storeRef();
    this.setupActions();
    this.setupNamed();
    this.verifyRequired();
    this.postInit();
    this.log('initalized');

    if (Domodule.debug) {
      this.el.module = this;
    }

    return this;
  }

  var _proto = Domodule.prototype;

  _proto.preInit = function preInit() {};

  _proto.postInit = function postInit() {};

  _proto.verifyRequired = function verifyRequired() {
    var _this = this;

    if (this.required === {}) {
      return this;
    }

    if (typeof this.required.options !== 'undefined') {
      this.setUps.options = Object.keys(this.options);
    }

    Object.keys(this.required).forEach(function (required) {
      _this.required[required].forEach(function (value) {
        if (_this.setUps[required].indexOf(value) < 0) {
          throw new Error(value + " is required as " + required + " for " + _this.moduleName + ", but is missing!");
        }
      });
    });
    return this;
  };

  _proto.setupActions = function setupActions() {
    var _this2 = this;

    this.setupAction(this.el);
    this.find(ACTION_SELECTOR).forEach(function (action) {
      var parent = findParent(action);

      if (parent === _this2.el) {
        _this2.setupAction(action);
      }
    });
  };

  _proto.setupAction = function setupAction(actionEl) {
    if (actionEl.dataset.domoduleActionProcessed === 'true') {
      return;
    }

    var _Domodule$parseAction = Domodule.parseAction(actionEl),
        actionName = _Domodule$parseAction.name,
        actionType = _Domodule$parseAction.type;

    if (!actionName) {
      return;
    } else if (typeof this[actionName] !== 'function') {
      this.log(actionName + " was registered, but there is no function set up");
      return;
    }

    this.log(actionName + " bound");
    this.storeSetUp(actionName, 'actions');
    DOMAssist.on(actionEl, actionType, this.boundActionRouter);
    actionEl.dataset.domoduleActionProcessed = 'true';
  };

  _proto.actionRouter = function actionRouter(event) {
    var actionEl = event.currentTarget;

    var _Domodule$parseAction2 = Domodule.parseAction(actionEl),
        actionName = _Domodule$parseAction2.name;

    var actionData = attrObj('action', actionEl);
    this[actionName].call(this, actionEl, event, actionData);
  };

  _proto.setupNamed = function setupNamed() {
    var _this3 = this;

    this.find('[data-name]').forEach(function (named) {
      var parent = findParent(named);

      if (parent !== _this3.el) {
        return;
      }

      if (!named.dataset.domoduleNameProcessed) {
        _this3.els[named.dataset.name] = named;

        _this3.storeSetUp(named.dataset.name, 'named');

        named.dataset.domoduleNameProcessed = 'true';
        named.dataset.domoduleOwner = _this3.id;
      }
    });
  };

  _proto.storeRef = function storeRef() {
    if (typeof window.domorefs === 'undefined') {
      window.domorefs = {};
    }

    if (typeof window.domorefs[this.el.dataset.moduleUid] !== 'undefined') {
      return false;
    }

    this.id = this.uuid;
    this.el.dataset.moduleUid = this.id;
    window.domorefs[this.el.dataset.moduleUid] = this;
  };

  _proto.find = function find(selector) {
    return DOMAssist.find(selector, this.el);
  };

  _proto.findOne = function findOne(selector) {
    return DOMAssist.findOne(selector, this.el);
  };

  _proto.findByName = function findByName(name) {
    return this.els[name];
  };

  _proto.getOption = function getOption(option) {
    return this.options[option];
  };

  _proto.storeSetUp = function storeSetUp(name, dict) {
    if (this.setUps[dict].indexOf(name) < 0) {
      this.setUps[dict].push(name);
    }
  };

  _proto.destroy = function destroy() {
    var _this4 = this;

    DOMAssist.find(ACTION_SELECTOR, this.el.parentNode).forEach(function (el) {
      if (el.dataset.domoduleActionProcessed === 'true') {
        var _Domodule$parseAction3 = Domodule.parseAction(el),
            actionType = _Domodule$parseAction3.type;

        el.removeEventListener(actionType, _this4.boundActionRouter);
        el.dataset.domoduleActionProcessed = 'false';
      }
    });
  } // static methods can't access `this` so they go last
  ;

  Domodule.parseAction = function parseAction(el) {
    var _el$dataset = el.dataset,
        name = _el$dataset.action,
        _el$dataset$actionTyp = _el$dataset.actionType,
        type = _el$dataset$actionTyp === void 0 ? 'click' : _el$dataset$actionTyp;
    return {
      name: name,
      type: type
    };
  };

  Domodule.getInstance = function getInstance(element) {
    if (element instanceof Node) {
      return window.domorefs[element.dataset.moduleUid];
    }

    throw new Error('getInstance expects a dom node');
  };

  Domodule.register = function register(name, cls) {
    if (typeof name === 'function') {
      cls = name;
      name = cls.prototype.constructor.name;
    }

    if (!window.domodules) {
      window.domodules = {};
    }

    Domodule.log("Registering " + name);
    window.domodules[name] = cls;
  };

  Domodule.discover = function discover(el) {
    if (el === void 0) {
      el = 'body';
    }

    Domodule.log('Discovering modules...');

    if (!window.domodules) {
      Domodule.log('No modules found');
      return;
    }

    var els;

    if (el instanceof Node) {
      els = [el];
    } else if (Array.isArray(el)) {
      els = el;
    } else {
      els = DOMAssist.find(el);
    }

    var instances = [];
    els.forEach(function (matched) {
      var foundModules = DOMAssist.find('[data-module]', matched);
      foundModules.forEach(function (moduleEl) {
        var moduleName = moduleEl.dataset.module;

        if (moduleName && typeof window.domodules[moduleName] === 'function') {
          if (typeof window.domorefs === 'object' && typeof window.domorefs[moduleEl.dataset.moduleUid] !== 'undefined') {
            return;
          }

          Domodule.log(moduleName + " found");
          instances.push(new window.domodules[moduleName](moduleEl));
        }
      });
    });
    return instances;
  } //used inside instance
  ;

  _proto.log = function log(msg) {
    Domodule.log(this.constructor.name + ": " + msg);
  };

  Domodule.log = function log(msg) {
    if (Domodule.debug) {
      console.log("[DOMODULE] " + msg); //eslint-disable-line no-console
    }
  };

  _createClass(Domodule, [{
    key: "required",
    get: function get() {
      return {};
    }
  }, {
    key: "defaults",
    get: function get() {
      return {};
    }
  }, {
    key: "uuid",
    get: function get() {
      return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, function (c) {
        var r = Math.random() * 16 | 0;
        var v = c === 'x' ? r : r & 0x3 | 0x8;
        return v.toString(16);
      });
    }
  }]);

  return Domodule;
}();

Domodule.debug = typeof window.localStorage === 'object' && window.localStorage.getItem('DomoduleDebug');
Domodule.autoDiscover = true;
window.addEventListener('DOMContentLoaded', function () {
  if (Domodule.autoDiscover) {
    Domodule.discover();
  }
});

export default Domodule;
//# sourceMappingURL=domodule.js.map
