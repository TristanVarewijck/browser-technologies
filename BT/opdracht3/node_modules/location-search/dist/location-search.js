import Complete from '@firstandthird/complete';
import { fire } from 'domassist';

function _defineProperties(target, props) {
  for (var i = 0; i < props.length; i++) {
    var descriptor = props[i];
    descriptor.enumerable = descriptor.enumerable || false;
    descriptor.configurable = true;
    if ("value" in descriptor) descriptor.writable = true;
    Object.defineProperty(target, descriptor.key, descriptor);
  }
}

function _createClass(Constructor, protoProps, staticProps) {
  if (protoProps) _defineProperties(Constructor.prototype, protoProps);
  if (staticProps) _defineProperties(Constructor, staticProps);
  return Constructor;
}

function _inheritsLoose(subClass, superClass) {
  subClass.prototype = Object.create(superClass.prototype);
  subClass.prototype.constructor = subClass;
  subClass.__proto__ = superClass;
}

var Events = {
  Geocoded: 'location:geocoded'
};
var Matching = {
  city: 'locality',
  state: 'administrative_area_level_1',
  country: 'country',
  country_iso: 'country'
};

var LocationSearch =
/*#__PURE__*/
function (_Complete) {
  _inheritsLoose(LocationSearch, _Complete);

  function LocationSearch() {
    return _Complete.apply(this, arguments) || this;
  }

  var _proto = LocationSearch.prototype;

  _proto.preInit = function preInit() {
    var _this = this;

    var init = null;

    if (typeof window.initAutocomplete !== 'undefined') {
      init = window.initAutocomplete;
    }

    window.initAutocomplete = function () {
      _this.onLoad();

      if (init) {
        init();
      }
    }; // In case there's another function already declared, means that we have
    // more than one instance. No need to append the script twice


    if (init) {
      return;
    }

    window.addEventListener('load', function () {
      var script = document.createElement('script');
      var url = 'https://maps.googleapis.com/maps/api/js?libraries=places&callback=initAutocomplete';

      if (_this.options.apikey) {
        url += "&key=" + _this.options.apikey;
      }

      script.src = url;
      document.head.appendChild(script);
    });
  };

  _proto.onLoad = function onLoad() {
    this.service = new window.google.maps.places.AutocompleteService();

    if (this.options.geocode) {
      this.geocodeService = new window.google.maps.Geocoder();
    }
  };

  _proto.fetch = function fetch() {
    var _this2 = this;

    if (!this.service) {
      return;
    }

    if (this.term.length < this.options.minLength) {
      return;
    }

    this.service.getPlacePredictions({
      input: this.term,
      types: this.options.types.split(',')
    }, function (results) {
      _this2.lastResults = {};
      var addresses = [];

      if (results) {
        addresses = results.map(function (result, index) {
          _this2.lastResults[result.description] = result;
          return result.description;
        });
      }

      _this2.render(addresses);

      if (!_this2.options.googleLogo) {
        return;
      }

      var list = _this2.findOne('ul');

      list.insertAdjacentHTML('beforeend', "<li class=\"" + _this2.options.googleAttributionClass + "\"><img src=\"" + _this2.options.googleLogo + "\" alt=\"Powered by Google\"/></li>");
    });
  };

  _proto.updateValue = function updateValue(obj) {
    _Complete.prototype.updateValue.call(this, obj);

    var location = this.lastResults[obj.value];
    this.locationSelected(location);

    if (this.options.geocode) {
      this.geocodeService.geocode({
        address: this.selectedTerm.value
      }, this.onLocationGeocoded.bind(this));
    }
  };

  _proto.getField = function getField(field, results, getShortName) {
    var result = null;
    var key = Matching[field];
    var filtered = results.address_components.filter(function (component) {
      return component.types.indexOf(key) > -1;
    })[0];

    if (filtered) {
      result = getShortName === true ? filtered.short_name : filtered.long_name;
    }

    return result;
  };

  _proto.onLocationGeocoded = function onLocationGeocoded(_ref) {
    var result = _ref[0];

    if (!result) {
      return;
    }

    var city = this.getField('city', result) || result.formatted_address;
    var detail = {
      lat: result.geometry.location.lat(),
      lng: result.geometry.location.lng(),
      country: this.getField('country', result),
      country_iso: this.getField('country', result, true),
      state: this.getField('state', result),
      city: city
    };
    fire(this.el, Events.Geocoded, {
      bubbles: true,
      detail: detail
    });
  };

  _proto.locationSelected = function locationSelected(location) {
    this.log(location);
  };

  _createClass(LocationSearch, [{
    key: "required",
    get: function get() {
      return {
        options: [],
        named: ['resultsContainer', 'input'],
        actions: ['search']
      };
    }
  }, {
    key: "defaults",
    get: function get() {
      return {
        types: '(regions)',
        minLength: 3,
        delay: 500,
        strict: true,
        showClass: 'show',
        highlightClass: 'selected',
        geocode: false,
        googleLogo: './img/light.png',
        googleAttributionClass: 'complete-google-attribution'
      };
    }
  }]);

  return LocationSearch;
}(Complete);

Complete.register('LocationSearch', LocationSearch);

export { Events, LocationSearch };
//# sourceMappingURL=location-search.js.map
