import Domodule from 'domodule';
import Bequest from 'bequest';
import debounce from 'tinybounce';
import { fire, find, on, addClass, removeClass } from 'domassist';

function _defineProperties(target, props) {
  for (var i = 0; i < props.length; i++) {
    var descriptor = props[i];
    descriptor.enumerable = descriptor.enumerable || false;
    descriptor.configurable = true;
    if ("value" in descriptor) descriptor.writable = true;
    Object.defineProperty(target, descriptor.key, descriptor);
  }
}

function _createClass(Constructor, protoProps, staticProps) {
  if (protoProps) _defineProperties(Constructor.prototype, protoProps);
  if (staticProps) _defineProperties(Constructor, staticProps);
  return Constructor;
}

function _inheritsLoose(subClass, superClass) {
  subClass.prototype = Object.create(superClass.prototype);
  subClass.prototype.constructor = subClass;
  subClass.__proto__ = superClass;
}

function _taggedTemplateLiteralLoose(strings, raw) {
  if (!raw) {
    raw = strings.slice(0);
  }

  strings.raw = raw;
  return strings;
}

function _templateObject() {
  var data = _taggedTemplateLiteralLoose(["<li data-action=\"select\" data-action-value=\"", "\">", "</li>"]);

  _templateObject = function _templateObject() {
    return data;
  };

  return data;
}
var DOMAssist = {
  on: on,
  addClass: addClass,
  removeClass: removeClass,
  find: find
};
var KEYS = {
  ENTER: 13,
  UP: 38,
  DOWN: 40
};

var Index =
/*#__PURE__*/
function (_Domodule) {
  _inheritsLoose(Index, _Domodule);

  function Index() {
    return _Domodule.apply(this, arguments) || this;
  }

  var _proto = Index.prototype;

  _proto.postInit = function postInit() {
    var _this = this;

    this.currentIndex = -1;
    DOMAssist.on(this.els.input, 'keydown', function (event) {
      return _this.keydown(event);
    });
    DOMAssist.on(this.els.input, 'change', this.onChange.bind(this));
    this.fetch = debounce(this.fetch.bind(this), this.options.delay);
    this.options.strict = this.options.strict === true || this.options.strict === 'true';
  };

  _proto.search = function search(el, event, options) {
    var term = ("" + el.value).trim(); // Don't search for the just selected term

    if (term === this.selectedTerm) {
      return;
    }

    this.term = term;
    this.endpoint = options.endpoint || this.options.endpoint;
    this.listClass = options.listClass || this.options.listClass;
    this.fetch();
  };

  _proto.fetch = function fetch() {
    var _this2 = this;

    var url = this.endpoint.replace(/\$\{term\}/g, encodeURIComponent(this.term));
    Bequest.request(url, 'GET', {}, function (err, resp) {
      // @TODO: Do something with this?
      if (err) {
        return false;
      }

      _this2.currentIndex = -1;

      _this2.render(resp.data);
    });
  };

  _proto.render = function render(results) {
    var _this3 = this;

    if (!Array.isArray(results)) {
      // @TODO: Maybe trigger an event or something
      return false;
    }

    var extra = '';

    if (this.listClass) {
      extra += " class=\"" + this.listClass + "\"";
    }

    var output = "<ul" + extra + ">";
    results.forEach(function (item) {
      var data = item;

      if (typeof data === 'string') {
        data = {
          value: data,
          name: data
        };
      }

      output += _this3.escape(_templateObject(), data.value, data.name);
    });
    output += '</ul>';
    this.els.resultsContainer.innerHTML = output;
    this.setupActions();
  };

  _proto.select = function select(el, event, options) {
    this.updateValue({
      value: options.value,
      name: el.innerHTML
    });
    this.els.resultsContainer.innerHTML = '';
  };

  _proto.updateValue = function updateValue(value) {
    this.selectedTerm = value;
    this.els.input.value = value.name;

    if (this.els.value) {
      this.els.value.value = value.value;
    }

    this.els.input.value = this.els.input.value.replace(/&amp;/g, '&').replace(/&gt;/g, '>').replace(/&lt;/g, '<').replace(/&quot;/g, '"').replace(/&#39;/g, '\'').replace(/&#96;/g, '`');
    fire(this.els.input, 'change', {
      bubbles: true,
      detail: value
    });
  };

  _proto.onChange = function onChange(event) {
    // Only allow the custom event being fired
    if (typeof event.detail === 'undefined') {
      event.stopImmediatePropagation();
    }
  };

  _proto.escape = function escape(strings) {
    for (var _len = arguments.length, vals = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
      vals[_key - 1] = arguments[_key];
    }

    var output = '';
    strings.forEach(function (str, i) {
      output += str;

      if (typeof vals[i] === 'string') {
        output += vals[i].replace(/&/g, '&amp;').replace(/>/g, '&gt;').replace(/</g, '&lt;').replace(/"/g, '&quot;').replace(/'/g, '&#39;').replace(/`/g, '&#96;');
      }
    });
    return output;
  };

  _proto.highlightItem = function highlightItem() {
    var items = find('li', this.els.resultsContainer);

    if (this.currentIndex < 0) {
      this.currentIndex = 0;
    }

    if (this.currentIndex >= items.length) {
      this.currentIndex = items.length - 1;
    }

    DOMAssist.removeClass(items, this.options.highlightClass);
    DOMAssist.addClass(items[this.currentIndex], this.options.highlightClass);
  };

  _proto.selectItem = function selectItem() {
    var items = find('li', this.els.resultsContainer);

    if (this.currentIndex < 0) {
      if (this.options.strict) {
        this.currentIndex = 0;
      } else {
        this.updateValue({
          value: this.els.input.value,
          name: this.els.input.value
        });
        return;
      }
    }

    if (this.currentIndex >= items.length) {
      this.currentIndex = items.length - 1;
    }

    items[this.currentIndex].click();
    DOMAssist.removeClass(items[this.currentIndex], this.options.highlightClass);
  };

  _proto.keydown = function keydown(event) {
    switch (event.keyCode) {
      case KEYS.UP:
        if (this.currentIndex > 0) {
          --this.currentIndex;
        }

        this.highlightItem();
        break;

      case KEYS.DOWN:
        ++this.currentIndex;
        this.highlightItem();
        break;

      case KEYS.ENTER:
        this.selectItem();
        break;

      default:
        return;
    }

    event.preventDefault();
  };

  _createClass(Index, [{
    key: "defaults",
    get: function get() {
      return {
        delay: 500,
        strict: true,
        showClass: 'show',
        highlightClass: 'selected'
      };
    }
  }, {
    key: "required",
    get: function get() {
      return {
        options: ['endpoint'],
        named: ['resultsContainer', 'input']
      };
    }
  }]);

  return Index;
}(Domodule);
Domodule.register('Complete', Index);

export default Index;
//# sourceMappingURL=complete.js.map
