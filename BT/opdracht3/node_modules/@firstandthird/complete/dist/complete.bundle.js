var FirstandthirdComplete = (function () {
  'use strict';

  function _defineProperties(target, props) {
    for (var i = 0; i < props.length; i++) {
      var descriptor = props[i];
      descriptor.enumerable = descriptor.enumerable || false;
      descriptor.configurable = true;
      if ("value" in descriptor) descriptor.writable = true;
      Object.defineProperty(target, descriptor.key, descriptor);
    }
  }

  function _createClass(Constructor, protoProps, staticProps) {
    if (protoProps) _defineProperties(Constructor.prototype, protoProps);
    if (staticProps) _defineProperties(Constructor, staticProps);
    return Constructor;
  }

  function _inheritsLoose(subClass, superClass) {
    subClass.prototype = Object.create(superClass.prototype);
    subClass.prototype.constructor = subClass;
    subClass.__proto__ = superClass;
  }

  function _taggedTemplateLiteralLoose(strings, raw) {
    if (!raw) {
      raw = strings.slice(0);
    }

    strings.raw = raw;
    return strings;
  }

  /* global window */
  function attrobj(key, el) {
    var values = {};
    Object.keys(el.dataset).forEach(function (data) {
      if (data.match(new RegExp("^" + key)) && data !== key) {
        var optionName = data.replace(key, '');
        var isGlobal = false;

        if (optionName.match(/^Global/)) {
          optionName = optionName.replace('Global', '');
          isGlobal = true;
        }

        optionName = "" + optionName[0].toLowerCase() + optionName.slice(1);

        if (isGlobal) {
          values[optionName] = window[el.dataset[data]];
        } else {
          values[optionName] = el.dataset[data];
        }

        if (typeof values[optionName] === 'undefined' || values[optionName] === '') {
          values[optionName] = true;
        }
      }
    });
    return values;
  }

  /* eslint-disable no-restricted-syntax, guard-for-in, prefer-rest-params, no-use-before-define */
  var aug = function aug() {
    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    args.unshift(false);
    return merge.apply(null, args);
  };

  aug.defaults = function () {
    for (var _len2 = arguments.length, args = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
      args[_key2] = arguments[_key2];
    }

    args.unshift(true);
    return merge.apply(null, args);
  }; // first arg is 'true' if using defaults-only version
  // first arg is 'false' if just doing deep merge:


  function merge() {
    for (var _len3 = arguments.length, args = new Array(_len3), _key3 = 0; _key3 < _len3; _key3++) {
      args[_key3] = arguments[_key3];
    }

    var useDefaults = args[0];
    var destObject = {}; // for each object in the rest of the argument list:

    args.slice(1, args.length).forEach(function (prop) {
      // for each property in the current object:
      for (var propName in prop) {
        // default-only mode skips the property if it's not present in the first object
        if (useDefaults && args[1][propName] === undefined) {
          return;
        } // get the value we are going to assign to the dest object:


        var propValue = prop[propName]; // if that value is an array just assign it to the dest object:

        if (Array.isArray(propValue)) {
          destObject[propName] = propValue;
          continue;
        } // if the source and destination values are both objects then recursively merge them:


        if (typeof propValue === 'object' && typeof destObject[propName] === 'object') {
          // get the right merging function for the recursive merge:
          var merger = useDefaults ? aug.defaults : aug;
          destObject[propName] = merger(destObject[propName], propValue);
          continue;
        } // otherwise just assign the value to the destination object:


        destObject[propName] = propValue;
      }
    });
    return destObject;
  }

  function isWindow(obj) {
    return obj != null && obj === obj.window;
  }

  function find(selector, context) {
    if (context === void 0) {
      context = null;
    }

    if (selector instanceof HTMLElement || selector instanceof Node || isWindow(selector)) {
      return [selector];
    } else if (selector instanceof NodeList) {
      return [].slice.call(selector);
    } else if (typeof selector === 'string') {
      var startElement = context ? find(context)[0] : document;
      return [].slice.call(startElement.querySelectorAll(selector));
    }

    return [];
  }

  function addClass(selector, cls) {
    if (Array.isArray(selector)) {
      return selector.forEach(function (item) {
        return addClass(item, cls);
      });
    }

    var els = find(selector);

    if (els.length) {
      var clsArray = [].concat(cls);
      els.forEach(function (el) {
        clsArray.forEach(function (item) {
          el.classList.add(item);
        });
      });
      return els;
    }
  }

  function on(selector, event, cb, capture) {
    if (capture === void 0) {
      capture = false;
    }

    if (Array.isArray(selector)) {
      selector.forEach(function (item) {
        return on(item, event, cb, capture);
      });
      return;
    }

    var data = {
      cb: cb,
      capture: capture
    };

    if (!window._domassistevents) {
      window._domassistevents = {};
    }

    window._domassistevents["_" + event] = data;
    var el = find(selector);

    if (el.length) {
      el.forEach(function (item) {
        item.addEventListener(event, cb, capture);
      });
    }
  }

  function findOne(selector, el) {
    var found = find(selector, el);

    if (found.length) {
      return found[0];
    }

    return null;
  } // Check for the usage of native support for CustomEvents which is lacking
  // completely on IE.
  //


  function canIuseNativeCustom() {
    try {
      var p = new CustomEvent('t', {
        detail: {
          a: 'b'
        }
      });
      return p.type === 't' && p.detail.a === 'b';
    } catch (e) {
      return false;
    }
  } // Lousy polyfill for the Custom Event constructor for IE.


  var IECustomEvent = function CustomEvent(type, params) {
    var e = document.createEvent('CustomEvent');

    if (params) {
      e.initCustomEvent(type, params.bubbles, params.cancelable, params.detail);
    } else {
      e.initCustomEvent(type, false, false, undefined);
    }

    return e;
  };

  var DomassistCustomEvent = false;

  function fire(selector, type, params) {
    if (params === void 0) {
      params = {};
    }

    if (Array.isArray(selector)) {
      return selector.forEach(function (item) {
        return fire(item, type, params);
      });
    }

    if (!DomassistCustomEvent) {
      DomassistCustomEvent = canIuseNativeCustom() ? CustomEvent : IECustomEvent;
    }

    var els = find(selector);

    if (els.length) {
      if (params.bubbles !== false) {
        params.bubbles = true;
      }

      els.forEach(function (el) {
        var event = new DomassistCustomEvent(type, params);
        el.dispatchEvent(event);
      });
      return els;
    }
  }

  function removeClass(selector, cls) {
    if (Array.isArray(selector)) {
      return selector.forEach(function (item) {
        return removeClass(item, cls);
      });
    }

    var els = find(selector);

    if (els.length) {
      var clsArray = [].concat(cls);
      els.forEach(function (el) {
        clsArray.forEach(function (item) {
          el.classList.remove(item);
        });
      });
      return els;
    }
  }

  function _defineProperties$1(target, props) {
    for (var i = 0; i < props.length; i++) {
      var descriptor = props[i];
      descriptor.enumerable = descriptor.enumerable || false;
      descriptor.configurable = true;
      if ("value" in descriptor) descriptor.writable = true;
      Object.defineProperty(target, descriptor.key, descriptor);
    }
  }

  function _createClass$1(Constructor, protoProps, staticProps) {
    if (protoProps) _defineProperties$1(Constructor.prototype, protoProps);
    if (staticProps) _defineProperties$1(Constructor, staticProps);
    return Constructor;
  }

  function findParent(elem) {
    if (elem.parentNode) {
      // Accounting for https://bugs.webkit.org/show_bug.cgi?id=161454
      var dataset = JSON.parse(JSON.stringify(elem.parentNode.dataset));

      if (dataset.module) {
        return elem.parentNode;
      }

      return findParent(elem.parentNode);
    }

    return elem;
  }

  var ACTION_SELECTOR = '[data-action]';
  var DOMAssist = {
    find: find,
    findOne: findOne,
    on: on
  };

  var Domodule =
  /*#__PURE__*/
  function () {
    function Domodule(el) {
      this.log('begin setup');
      this.el = el;
      this.els = {};
      this.options = aug({}, this.defaults, attrobj('module', this.el));
      this.moduleName = this.el.dataset.module;
      this.setUps = {
        actions: [],
        named: [],
        options: []
      };
      this.boundActionRouter = this.actionRouter.bind(this);
      this.preInit();
      this.storeRef();
      this.setupActions();
      this.setupNamed();
      this.verifyRequired();
      this.postInit();
      this.log('initalized');

      if (Domodule.debug) {
        this.el.module = this;
      }

      return this;
    }

    var _proto = Domodule.prototype;

    _proto.preInit = function preInit() {};

    _proto.postInit = function postInit() {};

    _proto.verifyRequired = function verifyRequired() {
      var _this = this;

      if (this.required === {}) {
        return this;
      }

      if (typeof this.required.options !== 'undefined') {
        this.setUps.options = Object.keys(this.options);
      }

      Object.keys(this.required).forEach(function (required) {
        _this.required[required].forEach(function (value) {
          if (_this.setUps[required].indexOf(value) < 0) {
            throw new Error(value + " is required as " + required + " for " + _this.moduleName + ", but is missing!");
          }
        });
      });
      return this;
    };

    _proto.setupActions = function setupActions() {
      var _this2 = this;

      this.setupAction(this.el);
      this.find(ACTION_SELECTOR).forEach(function (action) {
        var parent = findParent(action);

        if (parent === _this2.el) {
          _this2.setupAction(action);
        }
      });
    };

    _proto.setupAction = function setupAction(actionEl) {
      if (actionEl.dataset.domoduleActionProcessed === 'true') {
        return;
      }

      var _Domodule$parseAction = Domodule.parseAction(actionEl),
          actionName = _Domodule$parseAction.name,
          actionType = _Domodule$parseAction.type;

      if (!actionName) {
        return;
      } else if (typeof this[actionName] !== 'function') {
        this.log(actionName + " was registered, but there is no function set up");
        return;
      }

      this.log(actionName + " bound");
      this.storeSetUp(actionName, 'actions');
      DOMAssist.on(actionEl, actionType, this.boundActionRouter);
      actionEl.dataset.domoduleActionProcessed = 'true';
    };

    _proto.actionRouter = function actionRouter(event) {
      var actionEl = event.currentTarget;

      var _Domodule$parseAction2 = Domodule.parseAction(actionEl),
          actionName = _Domodule$parseAction2.name;

      var actionData = attrobj('action', actionEl);
      this[actionName].call(this, actionEl, event, actionData);
    };

    _proto.setupNamed = function setupNamed() {
      var _this3 = this;

      this.find('[data-name]').forEach(function (named) {
        var parent = findParent(named);

        if (parent !== _this3.el) {
          return;
        }

        if (!named.dataset.domoduleNameProcessed) {
          _this3.els[named.dataset.name] = named;

          _this3.storeSetUp(named.dataset.name, 'named');

          named.dataset.domoduleNameProcessed = 'true';
          named.dataset.domoduleOwner = _this3.id;
        }
      });
    };

    _proto.storeRef = function storeRef() {
      if (typeof window.domorefs === 'undefined') {
        window.domorefs = {};
      }

      if (typeof window.domorefs[this.el.dataset.moduleUid] !== 'undefined') {
        return false;
      }

      this.id = this.uuid;
      this.el.dataset.moduleUid = this.id;
      window.domorefs[this.el.dataset.moduleUid] = this;
    };

    _proto.find = function find(selector) {
      return DOMAssist.find(selector, this.el);
    };

    _proto.findOne = function findOne(selector) {
      return DOMAssist.findOne(selector, this.el);
    };

    _proto.findByName = function findByName(name) {
      return this.els[name];
    };

    _proto.getOption = function getOption(option) {
      return this.options[option];
    };

    _proto.storeSetUp = function storeSetUp(name, dict) {
      if (this.setUps[dict].indexOf(name) < 0) {
        this.setUps[dict].push(name);
      }
    };

    _proto.destroy = function destroy() {
      var _this4 = this;

      DOMAssist.find(ACTION_SELECTOR, this.el.parentNode).forEach(function (el) {
        if (el.dataset.domoduleActionProcessed === 'true') {
          var _Domodule$parseAction3 = Domodule.parseAction(el),
              actionType = _Domodule$parseAction3.type;

          el.removeEventListener(actionType, _this4.boundActionRouter);
          el.dataset.domoduleActionProcessed = 'false';
        }
      });
    } // static methods can't access `this` so they go last
    ;

    Domodule.parseAction = function parseAction(el) {
      var _el$dataset = el.dataset,
          name = _el$dataset.action,
          _el$dataset$actionTyp = _el$dataset.actionType,
          type = _el$dataset$actionTyp === void 0 ? 'click' : _el$dataset$actionTyp;
      return {
        name: name,
        type: type
      };
    };

    Domodule.getInstance = function getInstance(element) {
      if (element instanceof Node) {
        return window.domorefs[element.dataset.moduleUid];
      }

      throw new Error('getInstance expects a dom node');
    };

    Domodule.register = function register(name, cls) {
      if (typeof name === 'function') {
        cls = name;
        name = cls.prototype.constructor.name;
      }

      if (!window.domodules) {
        window.domodules = {};
      }

      Domodule.log("Registering " + name);
      window.domodules[name] = cls;
    };

    Domodule.discover = function discover(el) {
      if (el === void 0) {
        el = 'body';
      }

      Domodule.log('Discovering modules...');

      if (!window.domodules) {
        Domodule.log('No modules found');
        return;
      }

      var els;

      if (el instanceof Node) {
        els = [el];
      } else if (Array.isArray(el)) {
        els = el;
      } else {
        els = DOMAssist.find(el);
      }

      var instances = [];
      els.forEach(function (matched) {
        var foundModules = DOMAssist.find('[data-module]', matched);
        foundModules.forEach(function (moduleEl) {
          var moduleName = moduleEl.dataset.module;

          if (moduleName && typeof window.domodules[moduleName] === 'function') {
            if (typeof window.domorefs === 'object' && typeof window.domorefs[moduleEl.dataset.moduleUid] !== 'undefined') {
              return;
            }

            Domodule.log(moduleName + " found");
            instances.push(new window.domodules[moduleName](moduleEl));
          }
        });
      });
      return instances;
    } //used inside instance
    ;

    _proto.log = function log(msg) {
      Domodule.log(this.constructor.name + ": " + msg);
    };

    Domodule.log = function log(msg) {
      if (Domodule.debug) {
        console.log("[DOMODULE] " + msg); //eslint-disable-line no-console
      }
    };

    _createClass$1(Domodule, [{
      key: "required",
      get: function get() {
        return {};
      }
    }, {
      key: "defaults",
      get: function get() {
        return {};
      }
    }, {
      key: "uuid",
      get: function get() {
        return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, function (c) {
          var r = Math.random() * 16 | 0;
          var v = c === 'x' ? r : r & 0x3 | 0x8;
          return v.toString(16);
        });
      }
    }]);

    return Domodule;
  }();

  Domodule.debug = typeof window.localStorage === 'object' && window.localStorage.getItem('DomoduleDebug');
  Domodule.autoDiscover = true;
  window.addEventListener('DOMContentLoaded', function () {
    if (Domodule.autoDiscover) {
      Domodule.discover();
    }
  });

  /* eslint-env browser */
  var Ajax =
  /*#__PURE__*/
  function () {
    function Ajax() {}

    Ajax.serialize = function serialize(data) {
      var queryString = '';

      var formatValue = function formatValue(k, v) {
        return "&" + encodeURIComponent(k) + "=" + encodeURIComponent(v);
      };

      Object.keys(data).forEach(function (key) {
        var value = data[key];

        if (Array.isArray(value)) {
          value.forEach(function (k) {
            queryString += formatValue(key, k);
          });
        } else {
          queryString += formatValue(key, value);
        }
      });
      return queryString.substring(1);
    };

    Ajax.get = function get(url) {
      for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
        args[_key - 1] = arguments[_key];
      }

      return Ajax.request.apply(Ajax, [url, 'GET'].concat(args));
    };

    Ajax.post = function post(url) {
      for (var _len2 = arguments.length, args = new Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++) {
        args[_key2 - 1] = arguments[_key2];
      }

      return Ajax.request.apply(Ajax, [url, 'POST'].concat(args));
    };

    Ajax.patch = function patch(url) {
      for (var _len3 = arguments.length, args = new Array(_len3 > 1 ? _len3 - 1 : 0), _key3 = 1; _key3 < _len3; _key3++) {
        args[_key3 - 1] = arguments[_key3];
      }

      return Ajax.request.apply(Ajax, [url, 'PATCH'].concat(args));
    };

    Ajax.put = function put(url) {
      for (var _len4 = arguments.length, args = new Array(_len4 > 1 ? _len4 - 1 : 0), _key4 = 1; _key4 < _len4; _key4++) {
        args[_key4 - 1] = arguments[_key4];
      }

      return Ajax.request.apply(Ajax, [url, 'PUT'].concat(args));
    };

    Ajax.head = function head(url) {
      for (var _len5 = arguments.length, args = new Array(_len5 > 1 ? _len5 - 1 : 0), _key5 = 1; _key5 < _len5; _key5++) {
        args[_key5 - 1] = arguments[_key5];
      }

      return Ajax.request.apply(Ajax, [url, 'HEAD'].concat(args));
    };

    Ajax.del = function del(url) {
      for (var _len6 = arguments.length, args = new Array(_len6 > 1 ? _len6 - 1 : 0), _key6 = 1; _key6 < _len6; _key6++) {
        args[_key6 - 1] = arguments[_key6];
      }

      return Ajax.request.apply(Ajax, [url, 'DELETE'].concat(args));
    };

    Ajax.options = function options(url) {
      for (var _len7 = arguments.length, args = new Array(_len7 > 1 ? _len7 - 1 : 0), _key7 = 1; _key7 < _len7; _key7++) {
        args[_key7 - 1] = arguments[_key7];
      }

      return Ajax.request.apply(Ajax, [url, 'OPTIONS'].concat(args));
    }
    /**
     * request - Makes a request to a remote server
     *
     * @param {String} url         Url for the request
     * @param {String} method      Request method: GET, POST, etc (default: GET)
     * @param {Object} data        Data payload. Set to null to not send
     *                             anything. Data is sent as raw json (default: null)
     * @param {Function} callback  Called con completion with an object containing
     *                             the status code and the data. If the response
     *                             has a content-type containing json data will
     *                             be parsed, otherwise it will be the raw data.
     * @return XMLHttpRequest      Original XMLHttpRequest object to allow further
     *                             event binding.
     */
    ;

    Ajax.request = function request(url) {
      for (var _len8 = arguments.length, args = new Array(_len8 > 1 ? _len8 - 1 : 0), _key8 = 1; _key8 < _len8; _key8++) {
        args[_key8 - 1] = arguments[_key8];
      }

      var method = args[0],
          data = args[1],
          headers = args[2],
          callback = args[3];

      if (typeof method === 'function') {
        method = 'GET';
        callback = method;
        data = null;
        headers = {};
      }

      if (typeof data === 'function') {
        callback = data;
        data = null;
        headers = {};
      }

      if (typeof headers === 'function') {
        callback = headers;
        headers = {};
      }

      if (headers === null || typeof headers === 'undefined') {
        headers = {};
      }

      var useMethod = method.toUpperCase();
      var validMethods = ['GET', 'POST', 'PUT', 'PATCH', 'HEAD', 'DELETE', 'OPTIONS'];

      if (validMethods.indexOf(useMethod) === -1) {
        var err = new TypeError("Method must be one of the following: " + validMethods.join(', '));
        return callback(err);
      }

      if (typeof data === 'object' && data !== null && method === 'GET') {
        var serializedData = data;

        if (typeof data === 'object' && data !== null) {
          serializedData = Ajax.serialize(data);
          var join = url.indexOf('?') > -1 ? '&' : '?';
          url = url + join + serializedData;
          data = null;
        }
      }

      var xhr = new XMLHttpRequest();
      xhr.open(useMethod, url);

      xhr.onreadystatechange = function () {
        if (xhr.readyState > 3 && xhr.status > 0) {
          var contentType = xhr.getResponseHeader('content-type');
          var parsedResponse = xhr.responseText;

          if (contentType && contentType.toLowerCase().indexOf('json') > -1) {
            parsedResponse = JSON.parse(parsedResponse);
          }

          return callback(null, {
            headers: xhr.getAllResponseHeaders(),
            statusCode: xhr.status,
            data: parsedResponse
          });
        }
      };

      xhr.onerror = function (e) {
        return callback(e, null);
      };

      Object.keys(headers).forEach(function (header) {
        xhr.setRequestHeader(header, headers[header]);
      });

      if (data !== null) {
        var dataString = data;
        var contentHeader = 'application/x-www-form-urlencoded';

        if (typeof data === 'object') {
          dataString = JSON.stringify(data);
          contentHeader = 'application/json';
        }

        xhr.setRequestHeader('Content-Type', contentHeader);
        xhr.send(dataString);
      } else {
        xhr.send();
      }

      return xhr;
    };

    return Ajax;
  }();

  var debounce = function debounce(func, wait, immediate) {
    var timeout;
    return function () {
      var context = this;
      var args = arguments; // eslint-disable-line prefer-rest-params

      var later = function later() {
        timeout = null;

        if (!immediate) {
          func.apply(context, args);
        }
      };

      var callNow = immediate && !timeout;
      clearTimeout(timeout);
      timeout = setTimeout(later, wait);

      if (callNow) {
        func.apply(context, args);
      }
    };
  };

  function _templateObject() {
    var data = _taggedTemplateLiteralLoose(["<li data-action=\"select\" data-action-value=\"", "\">", "</li>"]);

    _templateObject = function _templateObject() {
      return data;
    };

    return data;
  }
  var DOMAssist$1 = {
    on: on,
    addClass: addClass,
    removeClass: removeClass,
    find: find
  };
  var KEYS = {
    ENTER: 13,
    UP: 38,
    DOWN: 40
  };

  var Index =
  /*#__PURE__*/
  function (_Domodule) {
    _inheritsLoose(Index, _Domodule);

    function Index() {
      return _Domodule.apply(this, arguments) || this;
    }

    var _proto = Index.prototype;

    _proto.postInit = function postInit() {
      var _this = this;

      this.currentIndex = -1;
      DOMAssist$1.on(this.els.input, 'keydown', function (event) {
        return _this.keydown(event);
      });
      DOMAssist$1.on(this.els.input, 'change', this.onChange.bind(this));
      this.fetch = debounce(this.fetch.bind(this), this.options.delay);
      this.options.strict = this.options.strict === true || this.options.strict === 'true';
    };

    _proto.search = function search(el, event, options) {
      var term = ("" + el.value).trim(); // Don't search for the just selected term

      if (term === this.selectedTerm) {
        return;
      }

      this.term = term;
      this.endpoint = options.endpoint || this.options.endpoint;
      this.listClass = options.listClass || this.options.listClass;
      this.fetch();
    };

    _proto.fetch = function fetch() {
      var _this2 = this;

      var url = this.endpoint.replace(/\$\{term\}/g, encodeURIComponent(this.term));
      Ajax.request(url, 'GET', {}, function (err, resp) {
        // @TODO: Do something with this?
        if (err) {
          return false;
        }

        _this2.currentIndex = -1;

        _this2.render(resp.data);
      });
    };

    _proto.render = function render(results) {
      var _this3 = this;

      if (!Array.isArray(results)) {
        // @TODO: Maybe trigger an event or something
        return false;
      }

      var extra = '';

      if (this.listClass) {
        extra += " class=\"" + this.listClass + "\"";
      }

      var output = "<ul" + extra + ">";
      results.forEach(function (item) {
        var data = item;

        if (typeof data === 'string') {
          data = {
            value: data,
            name: data
          };
        }

        output += _this3.escape(_templateObject(), data.value, data.name);
      });
      output += '</ul>';
      this.els.resultsContainer.innerHTML = output;
      this.setupActions();
    };

    _proto.select = function select(el, event, options) {
      this.updateValue({
        value: options.value,
        name: el.innerHTML
      });
      this.els.resultsContainer.innerHTML = '';
    };

    _proto.updateValue = function updateValue(value) {
      this.selectedTerm = value;
      this.els.input.value = value.name;

      if (this.els.value) {
        this.els.value.value = value.value;
      }

      this.els.input.value = this.els.input.value.replace(/&amp;/g, '&').replace(/&gt;/g, '>').replace(/&lt;/g, '<').replace(/&quot;/g, '"').replace(/&#39;/g, '\'').replace(/&#96;/g, '`');
      fire(this.els.input, 'change', {
        bubbles: true,
        detail: value
      });
    };

    _proto.onChange = function onChange(event) {
      // Only allow the custom event being fired
      if (typeof event.detail === 'undefined') {
        event.stopImmediatePropagation();
      }
    };

    _proto.escape = function escape(strings) {
      for (var _len = arguments.length, vals = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
        vals[_key - 1] = arguments[_key];
      }

      var output = '';
      strings.forEach(function (str, i) {
        output += str;

        if (typeof vals[i] === 'string') {
          output += vals[i].replace(/&/g, '&amp;').replace(/>/g, '&gt;').replace(/</g, '&lt;').replace(/"/g, '&quot;').replace(/'/g, '&#39;').replace(/`/g, '&#96;');
        }
      });
      return output;
    };

    _proto.highlightItem = function highlightItem() {
      var items = find('li', this.els.resultsContainer);

      if (this.currentIndex < 0) {
        this.currentIndex = 0;
      }

      if (this.currentIndex >= items.length) {
        this.currentIndex = items.length - 1;
      }

      DOMAssist$1.removeClass(items, this.options.highlightClass);
      DOMAssist$1.addClass(items[this.currentIndex], this.options.highlightClass);
    };

    _proto.selectItem = function selectItem() {
      var items = find('li', this.els.resultsContainer);

      if (this.currentIndex < 0) {
        if (this.options.strict) {
          this.currentIndex = 0;
        } else {
          this.updateValue({
            value: this.els.input.value,
            name: this.els.input.value
          });
          return;
        }
      }

      if (this.currentIndex >= items.length) {
        this.currentIndex = items.length - 1;
      }

      items[this.currentIndex].click();
      DOMAssist$1.removeClass(items[this.currentIndex], this.options.highlightClass);
    };

    _proto.keydown = function keydown(event) {
      switch (event.keyCode) {
        case KEYS.UP:
          if (this.currentIndex > 0) {
            --this.currentIndex;
          }

          this.highlightItem();
          break;

        case KEYS.DOWN:
          ++this.currentIndex;
          this.highlightItem();
          break;

        case KEYS.ENTER:
          this.selectItem();
          break;

        default:
          return;
      }

      event.preventDefault();
    };

    _createClass(Index, [{
      key: "defaults",
      get: function get() {
        return {
          delay: 500,
          strict: true,
          showClass: 'show',
          highlightClass: 'selected'
        };
      }
    }, {
      key: "required",
      get: function get() {
        return {
          options: ['endpoint'],
          named: ['resultsContainer', 'input']
        };
      }
    }]);

    return Index;
  }(Domodule);
  Domodule.register('Complete', Index);

  return Index;

}());
//# sourceMappingURL=complete.bundle.js.map
