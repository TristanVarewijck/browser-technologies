var aug = (function () {
  'use strict';

  /* eslint-disable no-restricted-syntax, guard-for-in, prefer-rest-params, no-use-before-define */

  var aug = function aug() {
    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    args.unshift(false);
    return merge.apply(null, args);
  };

  aug.defaults = function () {
    for (var _len2 = arguments.length, args = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
      args[_key2] = arguments[_key2];
    }

    args.unshift(true);
    return merge.apply(null, args);
  }; // first arg is 'true' if using defaults-only version
  // first arg is 'false' if just doing deep merge:


  function merge() {
    for (var _len3 = arguments.length, args = new Array(_len3), _key3 = 0; _key3 < _len3; _key3++) {
      args[_key3] = arguments[_key3];
    }

    var useDefaults = args[0];
    var destObject = {}; // for each object in the rest of the argument list:

    args.slice(1, args.length).forEach(function (prop) {
      // for each property in the current object:
      for (var propName in prop) {
        // default-only mode skips the property if it's not present in the first object
        if (useDefaults && args[1][propName] === undefined) {
          return;
        } // get the value we are going to assign to the dest object:


        var propValue = prop[propName]; // if that value is an array just assign it to the dest object:

        if (Array.isArray(propValue)) {
          destObject[propName] = propValue;
          continue;
        } // if the source and destination values are both objects then recursively merge them:


        if (typeof propValue === 'object' && typeof destObject[propName] === 'object') {
          // get the right merging function for the recursive merge:
          var merger = useDefaults ? aug.defaults : aug;
          destObject[propName] = merger(destObject[propName], propValue);
          continue;
        } // otherwise just assign the value to the destination object:


        destObject[propName] = propValue;
      }
    });
    return destObject;
  }

  return aug;

}());
//# sourceMappingURL=aug.bundle.js.map
