var bequest = (function () {
  'use strict';

  /* eslint-env browser */
  var Ajax =
  /*#__PURE__*/
  function () {
    function Ajax() {}

    Ajax.serialize = function serialize(data) {
      var queryString = '';

      var formatValue = function formatValue(k, v) {
        return "&" + encodeURIComponent(k) + "=" + encodeURIComponent(v);
      };

      Object.keys(data).forEach(function (key) {
        var value = data[key];

        if (Array.isArray(value)) {
          value.forEach(function (k) {
            queryString += formatValue(key, k);
          });
        } else {
          queryString += formatValue(key, value);
        }
      });
      return queryString.substring(1);
    };

    Ajax.get = function get(url) {
      for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
        args[_key - 1] = arguments[_key];
      }

      return Ajax.request.apply(Ajax, [url, 'GET'].concat(args));
    };

    Ajax.post = function post(url) {
      for (var _len2 = arguments.length, args = new Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++) {
        args[_key2 - 1] = arguments[_key2];
      }

      return Ajax.request.apply(Ajax, [url, 'POST'].concat(args));
    };

    Ajax.patch = function patch(url) {
      for (var _len3 = arguments.length, args = new Array(_len3 > 1 ? _len3 - 1 : 0), _key3 = 1; _key3 < _len3; _key3++) {
        args[_key3 - 1] = arguments[_key3];
      }

      return Ajax.request.apply(Ajax, [url, 'PATCH'].concat(args));
    };

    Ajax.put = function put(url) {
      for (var _len4 = arguments.length, args = new Array(_len4 > 1 ? _len4 - 1 : 0), _key4 = 1; _key4 < _len4; _key4++) {
        args[_key4 - 1] = arguments[_key4];
      }

      return Ajax.request.apply(Ajax, [url, 'PUT'].concat(args));
    };

    Ajax.head = function head(url) {
      for (var _len5 = arguments.length, args = new Array(_len5 > 1 ? _len5 - 1 : 0), _key5 = 1; _key5 < _len5; _key5++) {
        args[_key5 - 1] = arguments[_key5];
      }

      return Ajax.request.apply(Ajax, [url, 'HEAD'].concat(args));
    };

    Ajax.del = function del(url) {
      for (var _len6 = arguments.length, args = new Array(_len6 > 1 ? _len6 - 1 : 0), _key6 = 1; _key6 < _len6; _key6++) {
        args[_key6 - 1] = arguments[_key6];
      }

      return Ajax.request.apply(Ajax, [url, 'DELETE'].concat(args));
    };

    Ajax.options = function options(url) {
      for (var _len7 = arguments.length, args = new Array(_len7 > 1 ? _len7 - 1 : 0), _key7 = 1; _key7 < _len7; _key7++) {
        args[_key7 - 1] = arguments[_key7];
      }

      return Ajax.request.apply(Ajax, [url, 'OPTIONS'].concat(args));
    }
    /**
     * request - Makes a request to a remote server
     *
     * @param {String} url         Url for the request
     * @param {String} method      Request method: GET, POST, etc (default: GET)
     * @param {Object} data        Data payload. Set to null to not send
     *                             anything. Data is sent as raw json (default: null)
     * @param {Function} callback  Called con completion with an object containing
     *                             the status code and the data. If the response
     *                             has a content-type containing json data will
     *                             be parsed, otherwise it will be the raw data.
     * @return XMLHttpRequest      Original XMLHttpRequest object to allow further
     *                             event binding.
     */
    ;

    Ajax.request = function request(url) {
      for (var _len8 = arguments.length, args = new Array(_len8 > 1 ? _len8 - 1 : 0), _key8 = 1; _key8 < _len8; _key8++) {
        args[_key8 - 1] = arguments[_key8];
      }

      var method = args[0],
          data = args[1],
          headers = args[2],
          callback = args[3];

      if (typeof method === 'function') {
        method = 'GET';
        callback = method;
        data = null;
        headers = {};
      }

      if (typeof data === 'function') {
        callback = data;
        data = null;
        headers = {};
      }

      if (typeof headers === 'function') {
        callback = headers;
        headers = {};
      }

      if (headers === null || typeof headers === 'undefined') {
        headers = {};
      }

      var useMethod = method.toUpperCase();
      var validMethods = ['GET', 'POST', 'PUT', 'PATCH', 'HEAD', 'DELETE', 'OPTIONS'];

      if (validMethods.indexOf(useMethod) === -1) {
        var err = new TypeError("Method must be one of the following: " + validMethods.join(', '));
        return callback(err);
      }

      if (typeof data === 'object' && data !== null && method === 'GET') {
        var serializedData = data;

        if (typeof data === 'object' && data !== null) {
          serializedData = Ajax.serialize(data);
          var join = url.indexOf('?') > -1 ? '&' : '?';
          url = url + join + serializedData;
          data = null;
        }
      }

      var xhr = new XMLHttpRequest();
      xhr.open(useMethod, url);

      xhr.onreadystatechange = function () {
        if (xhr.readyState > 3 && xhr.status > 0) {
          var contentType = xhr.getResponseHeader('content-type');
          var parsedResponse = xhr.responseText;

          if (contentType && contentType.toLowerCase().indexOf('json') > -1) {
            parsedResponse = JSON.parse(parsedResponse);
          }

          return callback(null, {
            headers: xhr.getAllResponseHeaders(),
            statusCode: xhr.status,
            data: parsedResponse
          });
        }
      };

      xhr.onerror = function (e) {
        return callback(e, null);
      };

      Object.keys(headers).forEach(function (header) {
        xhr.setRequestHeader(header, headers[header]);
      });

      if (data !== null) {
        var dataString = data;
        var contentHeader = 'application/x-www-form-urlencoded';

        if (typeof data === 'object') {
          dataString = JSON.stringify(data);
          contentHeader = 'application/json';
        }

        xhr.setRequestHeader('Content-Type', contentHeader);
        xhr.send(dataString);
      } else {
        xhr.send();
      }

      return xhr;
    };

    return Ajax;
  }();

  return Ajax;

}());
//# sourceMappingURL=ajax.bundle.js.map
